Update: (05.02.2024) STENO-C_2.0
The purpose of this system is to enable the images in NFTs used in game files to carry data so that users can sell their game assets and experiences to each other over NFTs. We will also be solving a major security problem by adding information codes to AI-generated images, labeling them as unauthentic. The ability of images to carry data will open the door to many innovations for NFTs and increase their use.

https://x.com/IONprotocols/status/1785614955162509605

This image contains the full text of Solana's technical report. The original 53-page file has been compressed into an image. We are trying to integrate a more original version of the codes we provide under the title of image-to-image in our repository into another image losslessly and we have come a long way in this regard. https://x.com/IONprotocols/status/1784565876361965779  
 In the image below you can see the stenographic image (with ASCII text) hidden in the image
![8](https://github.com/baranakyolif/StenoNFT/assets/165828667/24db2b78-166d-4b4a-b233-b667ab47814a)


 Where We Are in Data Compression (Steno-C ver_2.1) What is really exciting about our work is that we can achieve very high lossless compression by changing the form of the information. But it's too early to make any clear claims as the algorithms we have are still in the testing phase, so we want to complete all the testing before sharing the algorithms.  

 

Update: (04.23.2024)
A small architecture has been added to our project to select the optimal pixels without compromising the integrity of an image file.  This architecture is based on the algorithmic description of the propagation steps of a protista known in biology as Physarum polycephalum and the addition of this algorithm to Dijkstra's algorithm. These algorithms are optimization architecture designed to select the most suitable pixels for textual data to be hidden in an image.

Code: https://github.com/baranakyolif/StenoNFT/blob/main/complexityoftransactions

CODE OUTPUT: 

The places represented in red in the image are where a total of 4000 ASCII characters (about 1 word page) are hidden. (The red color is only used to show where the data is hidden in the image. The system chooses the most appropriate colors for the image and makes it unknown where the data is hidden).

![image](https://github.com/baranakyolif/StenoNFT/assets/165828667/bd55f90b-57e0-452d-ad78-c37c50354baa)


UPDATE 2: (04.28.2024)

IMAGE IN PIXELS OF THE IMAGE
This python code hides another image in the most relevant pixels of the image using the Least Significant
Bit (LSB) truncation technique. Picture-in-picture logic is used to hide another linked image within an NFT.

CODE: https://github.com/baranakyolif/StenoNFT/blob/main/imageintoimage

CODE OUTPUT: 
![Görünen Resim](https://github.com/baranakyolif/StenoNFT/assets/165828667/51547c4c-c87c-4c14-b21f-f19e6d31b15b)

 
Output of the version with the sizing issue fixed (Python)
![8](https://github.com/baranakyolif/StenoNFT/assets/165828667/f1ca3723-2110-4d60-9f4d-084981970f80)

 
